server:
  port: 8080
  servlet:
    context-path: "/spring-ai-mcp-client"

spring:
  application:
    name: "spring-ai-mcp-client"
  threads:
    virtual:
      enabled: true
  ai:
    mcp:
      client:
        enabled: false
        name: "mcp-client"
        version: 1.0.0
        type: SYNC
        sse:
          connections:
            spring-ai-mcp-server1:
              url: "http://localhost:8081/spring-ai-mcp-server1"
              sse-endpoint: "/sse"
              auth-token: "server1-secret-token"
            spring-ai-mcp-server2:
              url: "http://localhost:8082/spring-ai-mcp-server2"
              sse-endpoint: "/sse"
              auth-token: "server2-secret-token"
    chat:
      client:
        enabled: false
    bedrock:
      aws:
        region: "${AI_BEDROCK_AWS_REGION:us-east-1}"
        access-key: "${AWS_AI_ACCESS_KEY_ID}"
        secret-key: "${AWS_AI_SECRET_ACCESS_KEY}"
        timeout: "10m"
      converse:
        chat:
          enabled: "${AI_BEDROCK_CHAT_ENABLED:false}"
          options:
            model: "${AI_BEDROCK_CHAT_MODEL:amazon.nova-pro-v1:0}"
    ollama:
      base-url: "${AI_OLLAMA_BASE_URL:http://localhost:11434}"
app:
  ai:
    chat:
      provider: "${APP_AI_CHAT_PROVIDER:ollama}"
      model: "${APP_AI_CHAT_MODEL:llama3.2:3b}"

logging:
  pattern:
    console: '%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %X{x_request_id:-no_request_id} %m %wEx %n'
  level:
    web: INFO
    org:
      springframework:
        boot:
          autoconfigure:
            security:
              servlet:
                UserDetailsServiceAutoConfiguration: OFF
        ai: INFO

logback-access:
  pattern: '%t{yyyy-MM-dd HH:mm:ss.SSS} ACCESS_LOG %D %B %s %i{x-forwarded-for} %reqAttribute{x_request_id} %m %U%q'

logback.access:
  enabled: "${ACCESS_LOG_ENABLED:true}"
  tee-filter:
    enabled: "${ACCESS_TEE_LOG_ENABLED:true}"